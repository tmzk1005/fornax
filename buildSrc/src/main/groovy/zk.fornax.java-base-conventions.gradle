plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'javaCodeFormatter'
    id 'eclipse'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

checkstyle {
    configFile = rootProject.file('buildSrc/qa/checkstyle/checkstyle.xml')
}

pmd {
    consoleOutput = true
    toolVersion = "6.47.0"
    ruleSets = []
    ruleSetFiles = files(rootProject.file('buildSrc/qa/pmd/pmd-java-rules.xml'))
}

ext {
    lombokVersion = "1.18.24"
    jacksonVersion = "2.13.3"
    junitJupiterVersion = "5.8.2"
    reactorVersion = "2020.0.20"
    slf4jApiVersion = "1.7.36"
    log4j2Version = "2.17.2"
    picocliVersion = "4.6.3"
    mongodbReactiveDriverVersion = '4.6.0'
    redisLettuceVersion= "6.2.0.RELEASE"
}

dependencies {
    implementation platform("org.projectlombok:lombok:${lombokVersion}")
    implementation platform("com.fasterxml.jackson:jackson-bom:${jacksonVersion}")
    implementation platform("org.junit.jupiter:junit-jupiter:${junitJupiterVersion}")
    implementation platform("io.projectreactor:reactor-bom:${reactorVersion}")
    implementation platform("org.slf4j:slf4j-api:${slf4jApiVersion}")
    implementation platform("org.apache.logging.log4j:log4j-bom:${log4j2Version}")
    implementation platform("info.picocli:picocli:${picocliVersion}")
    implementation platform("org.mongodb:mongodb-driver-reactivestreams:${mongodbReactiveDriverVersion}")
    implementation platform("org.mongodb:bson-record-codec:${mongodbReactiveDriverVersion}")
    implementation platform("io.lettuce:lettuce-core:${redisLettuceVersion}")

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "info.picocli:picocli-codegen:${picocliVersion}"

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

tasks.named('test') {
    useJUnitPlatform()
}

eclipse.classpath {
    defaultOutputDir = file("build/default")
    file.whenMerged { cp ->
        cp.entries.forEach { cpe ->
            if (cpe instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder) {
                cpe.output = cpe.output.replace "bin/", "build/classes/java/"
            }
            if (cpe instanceof org.gradle.plugins.ide.eclipse.model.Output) {
                cpe.path = cpe.path.replace "bin/", "build/"
            }
        }
    }
}
