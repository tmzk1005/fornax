import java.nio.file.Files

def createJarNameListForProject(String projectName) {
    def theProject = project(":${projectName}")
    def jarFileNames = []
    jarFileNames.add(theProject.jar.archiveFileName.get())
    for (jarFile in theProject.configurations.compileClasspath) {
        jarFileNames.add(jarFile.getName())
    }
    Files.writeString(project.file("conf/.${projectName}.classpath").toPath(), String.join('\n', jarFileNames))
}

tasks.create(name: "releaseTarGz", type: Tar) {
    dependsOn project(":gateway").tasks.getByName("build")
    dependsOn project(":manager").tasks.getByName("build")

    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    doFirst {
        createJarNameListForProject("gateway")
        createJarNameListForProject("manager")
    }

    def releaseName = "${rootProject.name}-${rootProject.version}"

    destinationDirectory = project.buildDir
    archiveFileName = "${releaseName}.tgz"
    compression = Compression.GZIP

    into releaseName
    from { 'bin' } { into 'bin/' fileMode 0755 }
    from { 'conf' } { into 'conf/' fileMode 0644 }
    from { 
        [
            project(":gateway").configurations.compileClasspath,
            project(":gateway").jar,
            project(":manager").configurations.compileClasspath,
            project(":manager").jar
        ] 
    } { into "libs/" fileMode 0644 }

    doLast {
        delete "conf/.gateway.classpath"
        delete "conf/.manager.classpath"
    }
}

task clean {
    delete "build"
}
